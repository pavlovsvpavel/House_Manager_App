name: 'Terraform'

on:
  push:
    branches:
      - main
  pull_request:
    branches: 
      - main

permissions:
  contents: read

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    environment: production

    defaults:
      run:
        shell: bash

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-central-1

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "1.3.0"

      - name: Terraform Init
        run: cd terraform && terraform init

      - name: Terraform Format
        run: cd terraform && terraform fmt -check

      - name: Check and Import Key Pair if Exists
        id: check_key
        run: |
          cd terraform
          KEY_PAIR_NAME="house-manager-terraform-key"
          KEY_PAIR_INFO=$(aws ec2 describe-key-pairs --key-names "$KEY_PAIR_NAME" --query "KeyPairs[0].KeyName" --output text 2>/dev/null || true)
      
          if [ -n "$KEY_PAIR_INFO" ]; then
            echo "Key pair '$KEY_PAIR_NAME' already exists. Importing into Terraform..."
            terraform import aws_key_pair.akp "$KEY_PAIR_NAME"
            echo "key_pair_exists=true" >> $GITHUB_ENV
          else
            echo "Key pair '$KEY_PAIR_NAME' does not exist. Terraform will create it."
            echo "key_pair_exists=false" >> $GITHUB_ENV
          fi

      - name: Check and Import IAM Policy if Exists
        run: |
          cd terraform
          POLICY_ARN=$(aws iam list-policies --query "Policies[?PolicyName=='MyS3AccessPolicy'].Arn" --output text)
          if [ -n "$POLICY_ARN" ]; then
            echo "IAM policy already exists. Importing into Terraform..."
            terraform import aws_iam_policy.access_policy $POLICY_ARN
          else
            echo "IAM policy does not exist. Terraform will create it."
          fi

      - name: Check and Import IAM Role if Exists
        run: |
          cd terraform
          ROLE_ARN=$(aws iam get-role --role-name my_s3_access_role --query "Role.Arn" --output text 2>/dev/null || true)
          if [ -n "$ROLE_ARN" ]; then
            echo "IAM role already exists. Importing into Terraform..."
            terraform import aws_iam_role.access_role $ROLE_ARN
          else
            echo "IAM role does not exist. Terraform will create it."
          fi

      - name: Terraform Plan
        env:
          GH_PAT: ${{ secrets.GH_PAT }}

        run: cd terraform && terraform plan -var-file="values.tfvars" -input=false

      - name: Terraform Apply
        if: env.exists != 'true'  # Apply if the key pair does not exist
        env:
          GH_PAT: ${{ secrets.GH_PAT }}
        run: cd terraform && terraform apply -var-file="values.tfvars" -auto-approve -input=false

