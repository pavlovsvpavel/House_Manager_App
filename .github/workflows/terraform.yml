name: Deploy to AWS with Terraform

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  # Job 1: Create EC2 Instance with Terraform
  create_ec2_instance:
    runs-on: ubuntu-latest
    outputs:
      private_ip: ${{ steps.get_private_ip.outputs.private_ip }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.3.0 # Specify your Terraform version

      - name: Terraform Init
        run: cd terraform && terraform init

      - name: Terraform Plan
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
        run: |
          cd terraform
            terraform plan -var-file="values.tfvars" -auto-approve -input=false

      - name: Terraform Apply
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
        run: |
          cd terraform
          terraform apply -var-file="values.tfvars" -auto-approve -input=false

      - name: Get Private IP from Terraform Outputs
        id: get_private_ip
        run: echo "::set-output name=private_ip::$(terraform output -raw private_ip)"

      - name: Extract SSH Key
        run: |
          echo "${{ secrets.EC2_SSH_KEY }}" > ec2_key.pem
          chmod 600 ec2_key.pem
          echo "SSH_KEY_PATH=$(pwd)/ec2_key.pem" >> $GITHUB_ENV

  # Job 2: Copy Scripts to EC2
  copy_scripts:
    runs-on: ubuntu-latest
    needs: create_ec2_instance
    env:
      PRIVATE_IP: ${{ needs.create_ec2_instance.outputs.private_ip }}
    steps:
      - name: Set up SSH Key
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.EC2_SSH_KEY }}

      - name: Copy Scripts to EC2
        run: |
          scp -i $SSH_KEY_PATH -o StrictHostKeyChecking=no -r scripts/* ${{ secrets.EC2_USER }}@$PRIVATE_IP:/home/ubuntu/scripts/
        
  # Job 3: Copy .env file from S3 to EC2
  copy_env_file:
    runs-on: ubuntu-latest
    needs: [ create_ec2_instance, copy_scripts ]
    env:
      PRIVATE_IP: ${{ needs.create_ec2_instance.outputs.private_ip }}
    steps:
      - name: Configure AWS CLI
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Set up SSH Key
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.EC2_SSH_KEY }}

      - name: Download .env from S3 and Upload to EC2
        run: |
          aws s3 cp s3://storage-for-env-files/.env/.env.aws .env.aws
          scp -i $SSH_KEY_PATH -o StrictHostKeyChecking=no .env.aws ${{ secrets.EC2_USER }}@$PRIVATE_IP:/home/ubuntu/app/envs/.env.aws

  # Job 4: Run Scripts on EC2
  run_scripts:
    runs-on: ubuntu-latest
    needs: [ create_ec2_instance, copy_scripts, copy_env_file ]
    env:
      PRIVATE_IP: ${{ needs.create_ec2_instance.outputs.private_ip }}

    steps:
      - name: Set up SSH Key
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.EC2_SSH_KEY }}

      - name: Run Scripts on EC2
        run: |
          ssh -i $SSH_KEY_PATH -o StrictHostKeyChecking=no ${{ secrets.EC2_USER }}@$PRIVATE_IP "bash /home/ubuntu/scripts/setup.sh"