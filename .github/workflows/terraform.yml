name: Deploy to AWS with Terraform

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  create_key:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create SSH private key file
        run: |
          echo "${{ secrets.AWS_PRIVATE_KEY }}" > house_manager_new_key.pem
          chmod 600 house_manager_new_key.pem

      - name: Upload SSH Key as Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ssh_private_key
          path: house_manager_new_key.pem

  create_ec2_instance:
    runs-on: ubuntu-latest
    needs: create_key
    outputs:
      public_dns_ec2: ${{ steps.get_public_dns.outputs.PUBLIC_DNS }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.3.0

      - name: Set Up AWS CLI
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
        run: |
          aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
          aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
          aws configure set region $AWS_REGION

      - name: Download SSH Key Artifact
        uses: actions/download-artifact@v4
        with:
          name: ssh_private_key
          path: ./

      - name: Fix Permissions on Private Key
        run: chmod 600 ./house_manager_new_key.pem

      - name: Terraform Init
        run: cd terraform && terraform init

      - name: Terraform Plan
        run: |
          cd terraform
          terraform plan -var-file="values.tfvars" -input=false

      - name: Terraform Apply
        run: |
          cd terraform
          terraform apply -var-file="values.tfvars" -auto-approve -input=false

      - name: Get Public DNS from Terraform Outputs
        id: get_public_dns
        run: |
          cd terraform
          echo "PUBLIC_DNS=$(terraform output -raw public_dns)" >> "$GITHUB_OUTPUT"

#      - name: Copy Scripts to EC2
#        run: |
#          scp -i ./house_manager_new_key.pem -o StrictHostKeyChecking=no -r terraform/scripts/* ${{ secrets.EC2_USER }}@$PUBLIC_DNS:/home/ubuntu/app/scripts/
#
#      - name: Download .env from S3
#        run: |
#          aws s3 cp s3://storage-for-env-files/.env/.env.aws .env.aws || { echo "Error: $?" ; exit 1; }
#
#      - name: Copy.env to EC2
#        run: |
#          scp -i ./house_manager_new_key.pem -o StrictHostKeyChecking=no .env.aws ${{ secrets.EC2_USER }}@$PUBLIC_DNS:/home/ubuntu/app/envs/
#
#      - name: Run Scripts on EC2
#        run: |
#          ssh -i ./house_manager_new_key.pem -o StrictHostKeyChecking=no ${{ secrets.EC2_USER }}@$PUBLIC_DNS "bash /home/ubuntu/app/scripts/setup.sh"

#  # Job 3: Copy Scripts to EC2
  copy_scripts:
    runs-on: ubuntu-latest
    needs: [ create_key, create_ec2_instance ]
    steps:
      - env:
          PUBLIC_DNS: ${{needs.create_ec2_instance.outputs.public_dns_ec2}}
      - name: Debug Environment Variables
        run: printenv

      - name: Check PUBLIC_DNS
        run: |
          echo "PUBLIC_DNS: $PUBLIC_DNS"

      - name: Download SSH Key Artifact
        uses: actions/download-artifact@v3
        with:
          name: ssh_private_key
          path: ./  # Downloads 'house_manager_new_key.pem' to the current directory

      - name: Copy Scripts to EC2
        run: |
          scp -i ./house_manager_new_key.pem -o StrictHostKeyChecking=no -r terraform/scripts/* ${{ secrets.EC2_USER }}@$PUBLIC_DNS:/home/ubuntu/app/scripts/

#  # Job 4: Copy .env file from S3 to EC2
#  copy_env_file:
#    runs-on: ubuntu-latest
#    needs: [ create_key, create_ec2_instance, copy_scripts ]
#    steps:
#      - name: Download SSH Key Artifact
#        uses: actions/download-artifact@v3
#        with:
#          name: ssh_private_key
#          path: ./  # Downloads 'house_manager_new_key.pem' to the current directory
#
#      - name: Download .env from S3 and Upload to EC2
#        run: |
#          aws s3 cp s3://storage-for-env-files/.env/.env.aws .env.aws
#          scp -i ./house_manager_new_key.pem -o StrictHostKeyChecking=no .env.aws ${{ secrets.EC2_USER }}@$PUBLIC_DNS:/home/ubuntu/app/envs/.env.aws
#
#  # Job 5: Run Scripts on EC2
#  run_scripts:
#    runs-on: ubuntu-latest
#    needs: [ create_key, create_ec2_instance, copy_scripts, copy_env_file ]
#    steps:
#      - name: Download SSH Key Artifact
#        uses: actions/download-artifact@v3
#        with:
#          name: ssh_private_key
#          path: ./  # Downloads 'house_manager_new_key.pem' to the current directory
#
#      - name: Run Scripts on EC2
#        run: |
#          ssh -i ./house_manager_new_key.pem -o StrictHostKeyChecking=no ${{ secrets.EC2_USER }}@$PUBLIC_DNS "bash /home/ubuntu/scripts/setup.sh"