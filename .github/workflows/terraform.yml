name: Deploy to AWS with Terraform

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.3.0

    - name: Terraform Init
      run: cd terraform && terraform init

    - name: Terraform Plan
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_REGION: ${{ secrets.AWS_REGION }}
      run: |
        cd terraform
        terraform plan -var-file="values.tfvars" -var "aws_region=${{ secrets.AWS_REGION }}" -var "key_pair_exists=$(aws ec2 describe-key-pairs --key-name house-manager-terraform-key --query 'KeyPairs[?KeyName==`house-manager-terraform-key`]' --output text | wc -l)" -var "policy_exists=$(aws iam list-policies --query 'Policies[?PolicyName==`MyS3AccessPolicy`]' --output text | wc -l)" -var "role_exists=$(aws iam get-role --role-name my_s3_access_role --query 'Role.RoleName' --output text | wc -l)"

    - name: Terraform Apply
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_REGION: ${{ secrets.AWS_REGION }}
      run: |
        cd terraform
        terraform apply -var-file="values.tfvars" -auto-approve -var "aws_region=${{ secrets.AWS_REGION }}" -var "key_pair_exists=$(aws ec2 describe-key-pairs --key-name house-manager-terraform-key --query 'KeyPairs[?KeyName==`house-manager-terraform-key`]' --output text | wc -l)" -var "policy_exists=$(aws iam list-policies --query 'Policies[?PolicyName==`MyS3AccessPolicy`]' --output text | wc -l)" -var "role_exists=$(aws iam get-role --role-name my_s3_access_role --query 'Role.RoleName' --output text | wc -l)"

    - name: Clean Up
      run: |
        cd terraform
        terraform destroy -var-file="values.tfvars" -auto-approve
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_REGION: ${{ secrets.AWS_REGION }}
